// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OggettoCase.DataAccess.Context;

#nullable disable

namespace OggettoCase.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231224094458_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("oggetto_case")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Calendars.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<string>>("AdditionalLinks")
                        .HasColumnType("text[]")
                        .HasColumnName("additional_links");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ended_at");

                    b.Property<List<string>>("EventDetails")
                        .HasColumnType("text[]")
                        .HasColumnName("event_details");

                    b.Property<string>("ExternalCalendarId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_calendar_id");

                    b.Property<string>("ExternalEventId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LinkToMeeting")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_to_meeting");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pK_calendars");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("iX_calendars_owner_id");

                    b.ToTable("calendars", "oggetto_case");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pK_categories");

                    b.ToTable("categories", "oggetto_case");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(355)
                        .HasColumnType("character varying(355)")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pK_comments");

                    b.HasIndex("CalendarId")
                        .HasDatabaseName("iX_comments_calendar_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_comments_user_id");

                    b.ToTable("comments", "oggetto_case");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("integer")
                        .HasColumnName("authentication_type");

                    b.Property<Guid?>("CalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendarId");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("categoryId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo_url");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refresh_token_expiration_date");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pK_users");

                    b.HasIndex("CalendarId")
                        .HasDatabaseName("iX_users_calendarId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("iX_users_categoryId");

                    b.ToTable("users", "oggetto_case");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Calendars.Calendar", b =>
                {
                    b.HasOne("OggettoCase.DataAccess.Models.Users.User", "Owner")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Comments.Comment", b =>
                {
                    b.HasOne("OggettoCase.DataAccess.Models.Calendars.Calendar", "Calendar")
                        .WithMany("Comments")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendar_event_id");

                    b.HasOne("OggettoCase.DataAccess.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_comments_users_user_id");

                    b.Navigation("Calendar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Users.User", b =>
                {
                    b.HasOne("OggettoCase.DataAccess.Models.Calendars.Calendar", null)
                        .WithMany("Users")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("fK_users_calendars_calendarId");

                    b.HasOne("OggettoCase.DataAccess.Models.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fK_users_categories_categoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Calendars.Calendar", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OggettoCase.DataAccess.Models.Users.User", b =>
                {
                    b.Navigation("CalendarEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
