DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'oggetto_case') THEN
        CREATE SCHEMA oggetto_case;
    END IF;
END $EF$;
CREATE TABLE IF NOT EXISTS oggetto_case."__MigrationsHistory" (
    "migrationId" character varying(150) NOT NULL,
    "productVersion" character varying(32) NOT NULL,
    CONSTRAINT "pK___MigrationsHistory" PRIMARY KEY ("migrationId")
);

START TRANSACTION;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'oggetto_case') THEN
        CREATE SCHEMA oggetto_case;
    END IF;
END $EF$;

CREATE TABLE oggetto_case.categories (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    description character varying(100) NOT NULL,
    CONSTRAINT "pK_categories" PRIMARY KEY (id)
);

CREATE TABLE oggetto_case.calendars (
    id uuid NOT NULL,
    external_event_id text NOT NULL,
    external_calendar_id text NOT NULL,
    title character varying(255) NOT NULL,
    description text NULL,
    created_at timestamp without time zone NOT NULL,
    started_at timestamp without time zone NOT NULL,
    ended_at timestamp without time zone NOT NULL,
    owner_id bigint NOT NULL,
    link_to_meeting text NOT NULL,
    additional_links text[] NULL,
    event_details text[] NULL,
    CONSTRAINT "pK_calendars" PRIMARY KEY (id)
);

CREATE TABLE oggetto_case.users (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    external_id text NOT NULL,
    name character varying(40) NOT NULL,
    surname character varying(40) NOT NULL,
    role integer NOT NULL,
    email character varying(150) NOT NULL,
    authentication_type integer NOT NULL,
    access_token text NOT NULL,
    is_approved boolean NOT NULL,
    "categoryId" integer NULL,
    photo_url text NOT NULL,
    refresh_token text NOT NULL,
    refresh_token_expiration_date timestamp without time zone NOT NULL,
    "calendarId" uuid NULL,
    CONSTRAINT "pK_users" PRIMARY KEY (id),
    CONSTRAINT "fK_users_calendars_calendarId" FOREIGN KEY ("calendarId") REFERENCES oggetto_case.calendars (id),
    CONSTRAINT "fK_users_categories_categoryId" FOREIGN KEY ("categoryId") REFERENCES oggetto_case.categories (id)
);

CREATE TABLE oggetto_case.comments (
    id uuid NOT NULL,
    text character varying(355) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    calendar_id uuid NOT NULL,
    user_id bigint NOT NULL,
    CONSTRAINT "pK_comments" PRIMARY KEY (id),
    CONSTRAINT calendar_event_id FOREIGN KEY (calendar_id) REFERENCES oggetto_case.calendars (id) ON DELETE CASCADE,
    CONSTRAINT "fK_comments_users_user_id" FOREIGN KEY (user_id) REFERENCES oggetto_case.users (id) ON DELETE CASCADE
);

CREATE INDEX "iX_calendars_owner_id" ON oggetto_case.calendars (owner_id);

CREATE INDEX "iX_comments_calendar_id" ON oggetto_case.comments (calendar_id);

CREATE INDEX "iX_comments_user_id" ON oggetto_case.comments (user_id);

CREATE INDEX "iX_users_calendarId" ON oggetto_case.users ("calendarId");

CREATE INDEX "iX_users_categoryId" ON oggetto_case.users ("categoryId");

ALTER TABLE oggetto_case.calendars ADD CONSTRAINT owner_id FOREIGN KEY (owner_id) REFERENCES oggetto_case.users (id) ON DELETE CASCADE;

INSERT INTO oggetto_case."__MigrationsHistory" ("migrationId", "productVersion")
VALUES ('20231224064149_InitialCreate', '7.0.5');

COMMIT;

